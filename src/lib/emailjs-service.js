import emailjs from '@emailjs/browser';

/**
 * Configuration EmailJS
 * √Ä configurer sur https://www.emailjs.com/
 */
const EMAILJS_CONFIG = {
  SERVICE_ID: process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID || 'your_service_id',
  TEMPLATE_ID_BAT: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_BAT || 'template_bat',
  TEMPLATE_ID_VALIDATION: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_VALIDATION || 'template_validation',
  TEMPLATE_ID_REJECTION: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_REJECTION || 'template_rejection',
  PUBLIC_KEY: process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY || 'your_public_key',
  ADMIN_EMAIL: process.env.ADMIN_EMAIL || 'thomas@guy.fr'
};

/**
 * Initialise EmailJS avec la cl√© publique
 */
export function initEmailJS() {
  if (typeof window !== 'undefined') {
    console.log('üîß Initialisation EmailJS avec:', {
      publicKey: EMAILJS_CONFIG.PUBLIC_KEY ? `${EMAILJS_CONFIG.PUBLIC_KEY.substring(0, 10)}...` : 'UNDEFINED',
      serviceId: EMAILJS_CONFIG.SERVICE_ID ? `${EMAILJS_CONFIG.SERVICE_ID.substring(0, 10)}...` : 'UNDEFINED'
    });
    
    if (!EMAILJS_CONFIG.PUBLIC_KEY) {
      throw new Error('PUBLIC_KEY EmailJS non d√©finie');
    }
    
    try {
      emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);
      console.log('‚úÖ EmailJS initialis√© avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur initialisation EmailJS:', error);
      throw error;
    }
  } else {
    console.log('‚ö†Ô∏è initEmailJS appel√© c√¥t√© serveur - ignor√©');
  }
}

/**
 * Envoie un email avec le lien BAT au client
 */
export async function sendBATEmailJS(recipientEmail, batToken, customMessage, originalFileName) {
  console.log('üìß D√©but sendBATEmailJS avec param√®tres:', {
    recipientEmail,
    batToken: batToken ? `${batToken.substring(0, 20)}...` : 'UNDEFINED',
    originalFileName,
    hasCustomMessage: !!customMessage
  });

  const batUrl = `${window.location.origin}/bat/${batToken}`;
  
  const templateParams = {
    to_email: recipientEmail,
    admin_email: EMAILJS_CONFIG.ADMIN_EMAIL,
    bat_url: batUrl,
    custom_message: customMessage,
    file_name: originalFileName,
    expiration_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString('fr-FR')
  };

  console.log('üìù Param√®tres template EmailJS:', templateParams);

  try {
    const response = await emailjs.send(
      EMAILJS_CONFIG.SERVICE_ID,
      EMAILJS_CONFIG.TEMPLATE_ID_BAT,
      templateParams
    );
    
    console.log('‚úÖ Email BAT envoy√©:', response);
    return { success: true, response };
  } catch (error) {
    console.error('‚ùå Erreur envoi email BAT:', error);
    console.error('‚ùå D√©tails erreur:', {
      message: error.message,
      status: error.status,
      text: error.text
    });
    return { success: false, error: error.message };
  }
}

/**
 * Envoie une notification de validation √† l'admin
 */
export async function sendValidationNotificationEmailJS(batData) {
  const templateParams = {
    to_email: EMAILJS_CONFIG.ADMIN_EMAIL,
    client_email: batData.recipientEmail,
    file_name: batData.originalName,
    validation_date: new Date().toLocaleDateString('fr-FR'),
    validation_time: new Date().toLocaleTimeString('fr-FR')
  };

  try {
    const response = await emailjs.send(
      EMAILJS_CONFIG.SERVICE_ID,
      EMAILJS_CONFIG.TEMPLATE_ID_VALIDATION,
      templateParams
    );
    
    console.log('‚úÖ Notification validation envoy√©e:', response);
    return { success: true, response };
  } catch (error) {
    console.error('‚ùå Erreur notification validation:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Envoie une notification de rejet √† l'admin
 */
export async function sendRejectionNotificationEmailJS(batData, rejectionMessage) {
  const templateParams = {
    to_email: EMAILJS_CONFIG.ADMIN_EMAIL,
    client_email: batData.recipientEmail,
    file_name: batData.originalName,
    rejection_message: rejectionMessage,
    rejection_date: new Date().toLocaleDateString('fr-FR'),
    rejection_time: new Date().toLocaleTimeString('fr-FR')
  };

  try {
    const response = await emailjs.send(
      EMAILJS_CONFIG.SERVICE_ID,
      EMAILJS_CONFIG.TEMPLATE_ID_REJECTION,
      templateParams
    );
    
    console.log('‚úÖ Notification rejet envoy√©e:', response);
    return { success: true, response };
  } catch (error) {
    console.error('‚ùå Erreur notification rejet:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Templates EmailJS sugg√©r√©s (√† cr√©er sur emailjs.com)
 */
export const EMAIL_TEMPLATES = {
  BAT: {
    name: 'Template BAT Client',
    subject: 'BAT √† valider - {{file_name}}',
    content: `
Bonjour,

Vous avez re√ßu un BAT (Bon √Ä Tirer) √† valider pour le fichier : {{file_name}}

Message personnel :
{{custom_message}}

üîó Lien de validation : {{bat_url}}

Ce lien expire le {{expiration_date}}.

Cordialement,
{{admin_email}}
    `
  },
  
  VALIDATION: {
    name: 'Notification Validation Admin',
    subject: '‚úÖ BAT Valid√© - {{file_name}}',
    content: `
Le BAT a √©t√© valid√© !

üìÑ Fichier : {{file_name}}
üë§ Client : {{client_email}}
üìÖ Date : {{validation_date}} √† {{validation_time}}

Le client a valid√© le BAT.
    `
  },
  
  REJECTION: {
    name: 'Notification Rejet Admin',
    subject: '‚ùå BAT Rejet√© - {{file_name}}',
    content: `
Le BAT a √©t√© rejet√©.

üìÑ Fichier : {{file_name}}
üë§ Client : {{client_email}}
üìÖ Date : {{rejection_date}} √† {{rejection_time}}

üí¨ Message du client :
{{rejection_message}}
    `
  }
};

console.log('üìß EmailJS configur√© pour:', {
  service: EMAILJS_CONFIG.SERVICE_ID,
  admin: EMAILJS_CONFIG.ADMIN_EMAIL
});
