#!/usr/bin/env node

/**
 * Script de test complet pour le syst√®me d'authentification
 */

console.log('üîê Test complet du syst√®me d\'authentification BAT\n');

const BASE_URL = 'http://localhost:3000';

// Test 1: Acc√®s sans authentification √† /admin
async function testUnauthenticatedAccess() {
  console.log('üìã Test 1: Acc√®s non authentifi√© √† /admin');
  
  try {
    const response = await fetch(`${BASE_URL}/admin`, {
      redirect: 'manual' // Ne pas suivre les redirections automatiquement
    });
    
    console.log('   Status:', response.status);
    console.log('   Headers Location:', response.headers.get('location'));
    
    if (response.status === 302 || response.status === 307) {
      console.log('   ‚úÖ Redirection d√©tect√©e (middleware fonctionne)');
    } else if (response.status === 200) {
      console.log('   ‚ö†Ô∏è  Pas de redirection (protection c√¥t√© client uniquement)');
    } else {
      console.log('   ‚ùå Comportement inattendu');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur:', error.message);
  }
}

// Test 2: API de v√©rification sans token
async function testVerifyAPI() {
  console.log('\nüìã Test 2: API de v√©rification sans token');
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/verify`);
    const status = response.status;
    
    console.log('   Status:', status);
    
    if (status === 401) {
      console.log('   ‚úÖ API refuse l\'acc√®s sans token');
    } else {
      console.log('   ‚ùå API devrait refuser l\'acc√®s');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur:', error.message);
  }
}

// Test 3: Connexion avec les bons identifiants
async function testLogin() {
  console.log('\nüìã Test 3: Connexion avec identifiants valides');
  
  const credentials = {
    email: process.env.ADMIN_EMAIL || 'thomas@guy.fr',
    password: process.env.ADMIN_PASSWORD || 'antoinelebg'
  };
  
  console.log(`   Email: ${credentials.email}`);
  console.log(`   Password: ${credentials.password}`);
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(credentials),
    });
    
    console.log('   Status:', response.status);
    
    if (response.ok) {
      const data = await response.json();
      console.log('   ‚úÖ Connexion r√©ussie');
      
      // Extraire le cookie de session
      const setCookieHeader = response.headers.get('set-cookie');
      if (setCookieHeader && setCookieHeader.includes('auth-token')) {
        console.log('   ‚úÖ Token d\'authentification re√ßu');
        return setCookieHeader;
      } else {
        console.log('   ‚ö†Ô∏è  Token manquant dans la r√©ponse');
      }
    } else {
      const error = await response.json();
      console.log('   ‚ùå √âchec de la connexion:', error.error);
    }
  } catch (error) {
    console.log('   ‚ùå Erreur:', error.message);
  }
  
  return null;
}

// Test 4: V√©rification avec token valide
async function testVerifyWithToken(cookie) {
  if (!cookie) return;
  
  console.log('\nüìã Test 4: V√©rification avec token valide');
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/verify`, {
      headers: {
        'Cookie': cookie
      }
    });
    
    console.log('   Status:', response.status);
    
    if (response.ok) {
      const data = await response.json();
      console.log('   ‚úÖ Token valide, utilisateur:', data.user.email);
    } else {
      console.log('   ‚ùå Token rejet√©');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur:', error.message);
  }
}

// Test 5: Configuration des services email
async function testEmailServiceConfig() {
  console.log('\nüìã Test 5: Configuration des services email');
  
  const hasEmailJS = !!(process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID && 
                        process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY);
  const hasSMTP = !!(process.env.EMAIL_HOST && 
                     process.env.EMAIL_USER && 
                     process.env.EMAIL_PASS);
  
  console.log('   EmailJS configur√©:', hasEmailJS ? '‚úÖ' : '‚ùå');
  console.log('   SMTP configur√©:', hasSMTP ? '‚úÖ' : '‚ùå');
  
  if (!hasEmailJS && !hasSMTP) {
    console.log('   ‚ö†Ô∏è  Aucun service email configur√© - Les notifications ne fonctionneront pas');
  } else {
    console.log('   ‚úÖ Au moins un service email est disponible');
  }
}

// Ex√©cuter tous les tests
async function runAllTests() {
  console.log('üöÄ Serveur de test:', BASE_URL);
  console.log('üìÖ Date:', new Date().toLocaleDateString('fr-FR'));
  console.log('=' .repeat(60));
  
  await testUnauthenticatedAccess();
  await testVerifyAPI();
  
  const cookie = await testLogin();
  await testVerifyWithToken(cookie);
  
  await testEmailServiceConfig();
  
  console.log('\n' + '='.repeat(60));
  console.log('üéØ Tests termin√©s !');
  console.log('\nüí° Pour tester l\'interface:');
  console.log('   1. Ouvrez http://localhost:3000');
  console.log('   2. Connectez-vous avec thomas@guy.fr / antoinelebg');
  console.log('   3. Essayez d\'acc√©der √† http://localhost:3000/admin');
  console.log('\nüìß Pour configurer les emails:');
  console.log('   - EmailJS: Voir CONFIGURATION-EMAILJS.md');
  console.log('   - SMTP: Configurez les variables EMAIL_* dans .env.local');
}

// Charger les variables d'environnement si disponible
try {
  require('dotenv').config({ path: '.env.local' });
} catch (error) {
  console.log('‚ö†Ô∏è  dotenv non disponible, utilisation des variables par d√©faut');
}

runAllTests().catch(console.error);
