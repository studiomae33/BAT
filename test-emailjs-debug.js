/**
 * Test de diagnostic EmailJS - √† ex√©cuter en local et en production
 */

// Simuler les variables d'environnement comme elles seraient en production
const mockEnvVars = {
  NEXT_PUBLIC_EMAILJS_SERVICE_ID: process.env.NEXT_PUBLIC_EMAILJS_SERVICE_ID,
  NEXT_PUBLIC_EMAILJS_PUBLIC_KEY: process.env.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY,
  NEXT_PUBLIC_EMAILJS_TEMPLATE_BAT: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_BAT,
  NEXT_PUBLIC_EMAILJS_TEMPLATE_VALIDATION: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_VALIDATION,
  NEXT_PUBLIC_EMAILJS_TEMPLATE_REJECTION: process.env.NEXT_PUBLIC_EMAILJS_TEMPLATE_REJECTION,
};

console.log('üîç Diagnostic EmailJS Configuration');
console.log('=====================================');

// V√©rifier les variables d'environnement
console.log('Variables d\'environnement:');
Object.entries(mockEnvVars).forEach(([key, value]) => {
  console.log(`${key}: ${value ? `‚úÖ [${value.substring(0, 10)}...]` : '‚ùå MANQUANT'}`);
});

// Test de la fonction getClientEmailService
function testGetClientEmailService() {
  const hasEmailJS = mockEnvVars.NEXT_PUBLIC_EMAILJS_SERVICE_ID && 
                     mockEnvVars.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY;
  
  console.log('\nüß™ Test getClientEmailService:');
  console.log(`hasEmailJS: ${hasEmailJS}`);
  console.log(`Service d√©tect√©: ${hasEmailJS ? 'emailjs' : 'none'}`);
  
  return hasEmailJS ? 'emailjs' : 'none';
}

// Test de la configuration
function testEmailConfiguration() {
  console.log('\nüîß Test configuration EmailJS:');
  
  const service = testGetClientEmailService();
  
  if (service === 'none') {
    return { 
      success: false, 
      error: 'EmailJS non configur√© - Variables d\'environnement manquantes',
      service: 'none',
      debug: mockEnvVars
    };
  }

  // V√©rifier que les variables sont bien pr√©sentes
  const serviceId = mockEnvVars.NEXT_PUBLIC_EMAILJS_SERVICE_ID;
  const publicKey = mockEnvVars.NEXT_PUBLIC_EMAILJS_PUBLIC_KEY;
  const templateBAT = mockEnvVars.NEXT_PUBLIC_EMAILJS_TEMPLATE_BAT;
  
  if (!serviceId || !publicKey || !templateBAT) {
    return {
      success: false,
      error: 'Variables EmailJS incompl√®tes',
      service: 'emailjs',
      debug: {
        hasServiceId: !!serviceId,
        hasPublicKey: !!publicKey,
        hasTemplate: !!templateBAT,
        values: mockEnvVars
      }
    };
  }
  
  return { 
    success: true, 
    service: 'emailjs',
    message: 'Configuration EmailJS valide',
    debug: {
      hasServiceId: !!serviceId,
      hasPublicKey: !!publicKey,
      hasTemplate: !!templateBAT
    }
  };
}

// Ex√©cuter les tests
const result = testEmailConfiguration();

console.log('\nüìä R√©sultat du test:');
console.log(JSON.stringify(result, null, 2));

console.log('\nüéØ Recommandations:');
if (!result.success) {
  console.log('‚ùå Configuration EmailJS √©chou√©e');
  console.log('1. V√©rifier que toutes les variables NEXT_PUBLIC_EMAILJS_* sont d√©finies');
  console.log('2. Red√©ployer l\'application apr√®s avoir configur√© les variables');
  console.log('3. V√©rifier que les variables sont bien accessibles c√¥t√© client');
} else {
  console.log('‚úÖ Configuration EmailJS OK - le probl√®me est ailleurs');
  console.log('1. V√©rifier la librairie @emailjs/browser');
  console.log('2. V√©rifier les permissions CORS sur EmailJS');
  console.log('3. Tester l\'initialisation EmailJS en production');
}
